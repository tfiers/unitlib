"""
Type hints for `array.py`.

Main reason for this file (instead of just giving all type-hints in `array.py` itself)
is to add type-hints on top of the `NDArrayOperatorsMixin` dunder methods (i.e.
`__mul__` and `__imul__` etc).
"""

from typing import Optional, Tuple, Union

import numpy as np
from numpy.lib.mixins import NDArrayOperatorsMixin

from .support.type_aliases import ArrayIndex, ArraySlice
from .unit import Unit, DataUnit


class Array(NDArrayOperatorsMixin):
    # ---------------
    # Core properties
    data: np.ndarray
    display_unit: Unit
    name: Optional[str]
    data_unit: DataUnit
    data_in_display_units: np.ndarray
    dd: np.ndarray
    # --------------
    # Initialisation
    def __init__(
        self,
        data,
        display_unit: "Unit",
        name: Optional[str] = None,
        data_are_given_in_display_units: bool = False,
    ): ...
    # ---------------
    # Array behaviour
    _DIY_help_text: str
    def __getitem__(self, index: ArrayIndex) -> ArraySlice: ...
    def __setitem__(self, index: "ArrayIndex", value: "ArraySlice"): ...
    shape: Tuple[int, ...]
    ndim: int
    # ----------
    # Operations
    def __add__(self, other) -> Array: ...
    def __radd__(self, other) -> Array: ...
    def __sub__(self, other) -> Array: ...
    def __rsub__(self, other) -> Array: ...
    def __mul__(self, other) -> Union[Array, np.ndarray]: ...
    def __rmul__(self, other) -> Union[Array, np.ndarray]: ...
    def __truediv__(self, other) -> Union[Array, np.ndarray]: ...
    def __rtruediv__(self, other) -> Union[Array, np.ndarray]: ...
    def __eq__(self, other) -> np.ndarray: ...
    def __ne__(self, other) -> np.ndarray: ...
    def __lt__(self, other) -> np.ndarray: ...
    def __le__(self, other) -> np.ndarray: ...
    def __gt__(self, other) -> np.ndarray: ...
    def __ge__(self, other) -> np.ndarray: ...
    def __pow__(self, power) -> Union[Array, np.ndarray]: ...

class NonNumericDataException(TypeError): ...
