from numbers import Number
from typing import Optional, Union

import numpy as np

from unitlib import Array, Unit
from unitlib.support.type_aliases import Scalar

class Quantity(Array):
    # -----------
    # Prop & init
    value: Number
    def __init__(
        self,
        value: Scalar,
        display_unit: Unit,
        name: Optional[str] = None,
        value_is_given_in_display_units: bool = True,
    ): ...
    # ----------
    # Operations
    def __add__(self, other: Quantity) -> Quantity: ...
    def __radd__(self, other: Quantity) -> Quantity: ...
    def __sub__(self, other: Quantity) -> Quantity: ...
    def __rsub__(self, other: Quantity) -> Quantity: ...
    def __mul__(self, other: Union[Quantity, Unit]) -> Union[Quantity, Scalar]: ...
    def __rmul__(self, other: Union[Quantity, Unit]) -> Union[Quantity, Scalar]: ...
    def __truediv__(self, other: Union[Quantity, Unit]) -> Union[Quantity, Scalar]: ...
    def __rtruediv__(self, other: Union[Quantity, Unit]) -> Union[Quantity, Scalar]: ...
    def __eq__(self, other: Quantity) -> bool: ...
    def __ne__(self, other: Quantity) -> bool: ...
    def __lt__(self, other: Quantity) -> bool: ...
    def __le__(self, other: Quantity) -> bool: ...
    def __gt__(self, other: Quantity) -> bool: ...
    def __ge__(self, other: Quantity) -> bool: ...
    def __pow__(self, power: int) -> Union[Quantity, Scalar]: ...
