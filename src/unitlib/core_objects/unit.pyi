from abc import ABC
from numbers import Number
from typing import Union, Literal

import numpy as np

from unitlib import Quantity, Array
from unitlib.prefixes import Prefix
from unitlib.support.type_aliases import Scalar, NDArrayLike

class Unit(Quantity, ABC):
    # ---------------
    # Core properties
    name: str
    scale: Number
    data_unit: "DataUnit"
    # ---------
    # Internals
    def __hash__(self) -> int: ...
    def _raised_to(self, power: int) -> Unit: ...
    # ----------
    # Operations
    def __mul__(self, other: Unit) -> Unit: ...
    def __rmul__(self, other: Prefix) -> Unit: ...
    def __rmul__(self, other: Scalar) -> Quantity: ...
    def __rmul__(self, other: NDArrayLike) -> Array: ...
    def __truediv__(self, other: Unit) -> Unit: ...
    def __rtruediv__(self, other: Literal[1]) -> Unit: ...
    def __rtruediv__(self, other: Scalar) -> Quantity: ...
    def __rtruediv__(self, other: Quantity) -> Union[Quantity, np.number]: ...
    def __rtruediv__(self, other: NDArrayLike) -> Array: ...
    def __rtruediv__(self, other: Array) -> Union[Array, np.ndarray]: ...
    def __pow__(self, power: int) -> Unit: ...

class DataUnit(Unit, ABC): ...
class IncompatibleUnitsError(Exception): ...
